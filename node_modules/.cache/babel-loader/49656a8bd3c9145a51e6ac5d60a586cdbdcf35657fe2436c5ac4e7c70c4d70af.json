{"ast":null,"code":"var _jsxFileName = \"/Users/shehalshah/Desktop/react/dulynoted/src/context/notes/NoteState.js\",\n  _s = $RefreshSig$();\nimport notecontext from \"./notecontext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:4000\";\n  const notesinitial = [];\n  const [notes, setnotes] = useState(notesinitial);\n\n  //get all  notes\n  const getNotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      // *GET, POST, PUT, DELETE, etc\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNkN2IzYmZiYjVkYTEyN2E0MTdlMjJlIn0sImlhdCI6MTY3NTA4MzA2Mn0.RUbuvpO0QzAaiboeGo0KUb_1VCMcjIn4oRZZcjb94uQ\"\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setnotes(json);\n  };\n\n  //add notes\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      // *GET, POST, PUT, DELETE, etc\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNkN2IzYmZiYjVkYTEyN2E0MTdlMjJlIn0sImlhdCI6MTY3NTA4MzA2Mn0.RUbuvpO0QzAaiboeGo0KUb_1VCMcjIn4oRZZcjb94uQ\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    console.log(\"adding note\");\n    const note = {\n      \"_id\": \"63d91d44a010ebbd3339cb907\",\n      \"user\": \"63d7b3bfbb5da127a417e22e\",\n      \"title\": title,\n      \"description\": description,\n      \"tag\": tag,\n      \"date\": \"2023-01-31T13:53:08.067Z\",\n      \"__v\": 0\n    };\n    setnotes(notes.concat(note));\n  };\n\n  //delete note\n  const deleteNote = async id => {\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      // *GET, POST, PUT, DELETE, etc\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNkN2IzYmZiYjVkYTEyN2E0MTdlMjJlIn0sImlhdCI6MTY3NTA4MzA2Mn0.RUbuvpO0QzAaiboeGo0KUb_1VCMcjIn4oRZZcjb94uQ\"\n      }\n    });\n    console.log(\"note deleted of id \" + id);\n    const json = response.json();\n    console.log(json);\n\n    //added to new notes only if notes id != given id\n    const newNotes = notes.filter(n => {\n      return n._id !== id;\n    });\n    setnotes(newNotes);\n  };\n\n  //edit note \n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      // *GET, POST, PUT, DELETE, etc\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNkN2IzYmZiYjVkYTEyN2E0MTdlMjJlIn0sImlhdCI6MTY3NTA4MzA2Mn0.RUbuvpO0QzAaiboeGo0KUb_1VCMcjIn4oRZZcjb94uQ\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    const json = response.json(); // parses JSON response into native JavaScript objects\n\n    let newnotes = JSON.parse(JSON.stringify(notes));\n    //for loop search for note with that id\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        notes[index].title = title;\n        notes[index].description = description;\n        notes[index].tag = tag;\n      }\n      break;\n    }\n    setnotes(notes);\n  };\n  return /*#__PURE__*/_jsxDEV(notecontext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"AoVBfJhv+WZzotSMTTreJsweXo4=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["notecontext","useState","NoteState","props","host","notesinitial","notes","setnotes","getNotes","response","fetch","method","headers","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","n","_id","editNote","newnotes","parse","index","length","element","children"],"sources":["/Users/shehalshah/Desktop/react/dulynoted/src/context/notes/NoteState.js"],"sourcesContent":["import notecontext from \"./notecontext\";\nimport { useState } from \"react\";\nconst NoteState = (props) => {\n\n  const host=\"http://localhost:4000\"\n\n    const notesinitial =[]\n\n    const [notes, setnotes] = useState(notesinitial)\n\n\n    //get all  notes\n    const getNotes = async ()=>{\n\n      const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n        \n        method: 'GET', // *GET, POST, PUT, DELETE, etc\n        headers: {\n          'Content-Type': 'application/json',\n          \"auth-token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNkN2IzYmZiYjVkYTEyN2E0MTdlMjJlIn0sImlhdCI6MTY3NTA4MzA2Mn0.RUbuvpO0QzAaiboeGo0KUb_1VCMcjIn4oRZZcjb94uQ\"\n        },\n      });\n      const json=await response.json();\n      console.log(json);\n      setnotes(json)\n    }\n\n    //add notes\n    const addNote = async (title,description,tag)=>{\n\n      const response = await fetch(`${host}/api/notes/addnote`, {\n        \n        method: 'POST', // *GET, POST, PUT, DELETE, etc\n        headers: {\n          'Content-Type': 'application/json',\n          \"auth-token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNkN2IzYmZiYjVkYTEyN2E0MTdlMjJlIn0sImlhdCI6MTY3NTA4MzA2Mn0.RUbuvpO0QzAaiboeGo0KUb_1VCMcjIn4oRZZcjb94uQ\"\n        },\n        body: JSON.stringify({title,description,tag}) // body data type must match \"Content-Type\" header\n      });\n      console.log(\"adding note\");\n      const note={\n        \"_id\": \"63d91d44a010ebbd3339cb907\",\n        \"user\": \"63d7b3bfbb5da127a417e22e\",\n        \"title\": title,\n        \"description\": description,\n        \"tag\": tag,\n        \"date\": \"2023-01-31T13:53:08.067Z\",\n        \"__v\": 0\n      };\n      setnotes(notes.concat(note))\n    }\n    \n    //delete note\n    const deleteNote = async (id)=>{\n      const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n        \n        method: 'DELETE', // *GET, POST, PUT, DELETE, etc\n        headers: {\n          'Content-Type': 'application/json',\n          \"auth-token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNkN2IzYmZiYjVkYTEyN2E0MTdlMjJlIn0sImlhdCI6MTY3NTA4MzA2Mn0.RUbuvpO0QzAaiboeGo0KUb_1VCMcjIn4oRZZcjb94uQ\"\n        },\n      });\n      console.log(\"note deleted of id \"+ id);\n      const json=response.json();\n      console.log(json);\n\n      //added to new notes only if notes id != given id\n      const newNotes=notes.filter((n)=>{return n._id!==id})\n      setnotes(newNotes)\n\n    }\n\n    //edit note \n    const editNote = async(id,title,description,tag)=>{\n\n\n      const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n        \n        method: 'PUT', // *GET, POST, PUT, DELETE, etc\n        headers: {\n          'Content-Type': 'application/json',\n          \"auth-token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjNkN2IzYmZiYjVkYTEyN2E0MTdlMjJlIn0sImlhdCI6MTY3NTA4MzA2Mn0.RUbuvpO0QzAaiboeGo0KUb_1VCMcjIn4oRZZcjb94uQ\"\n        },\n        body: JSON.stringify({title,description,tag}) // body data type must match \"Content-Type\" header\n      });\n      const json= response.json(); // parses JSON response into native JavaScript objects\n\n      let newnotes=JSON.parse(JSON.stringify(notes))\n      //for loop search for note with that id\n      for (let index = 0; index < notes.length; index++) {\n        const element = notes[index];\n        if(element._id===id){\n          notes[index].title=title;\n          notes[index].description=description;\n          notes[index].tag=tag\n        }\n        break;\n      }\n      setnotes(notes)\n    }\n\n    return (\n        <notecontext.Provider value={{notes,addNote,deleteNote,editNote,getNotes}}>\n            {props.children}\n        </notecontext.Provider>\n    )\n}\n\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}