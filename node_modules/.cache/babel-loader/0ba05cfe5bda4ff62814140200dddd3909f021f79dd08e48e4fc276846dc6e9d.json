{"ast":null,"code":"var _jsxFileName = \"/Users/shehalshah/Desktop/react/dulynoted/src/context/notes/NoteState.js\",\n  _s = $RefreshSig$();\nimport notecontext from \"./notecontext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:4000\";\n  const notesinitial = [];\n  const [notes, setnotes] = useState(notesinitial);\n  const userinitial = [];\n  const [user, setuser] = useState(userinitial);\n\n  //get all  notes\n  const getNotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      // *GET, POST, PUT, DELETE, etc\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem(\"token\")\n      }\n    });\n    const json = await response.json();\n    setnotes(json);\n  };\n\n  //add notes\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      // *GET, POST, PUT, DELETE, etc\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    const note = await response.json();\n    setnotes(notes.concat(note));\n  };\n\n  //delete note\n  const deleteNote = async id => {\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      // *GET, POST, PUT, DELETE, etc\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem(\"token\")\n      }\n    });\n    // const json=await response.json();\n\n    //added to new notes only if notes id != given id\n    const newNotes = notes.filter(n => {\n      return n._id !== id;\n    });\n    setnotes(newNotes);\n  };\n\n  //edit note \n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      // *GET, POST, PUT, DELETE, etc\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    const json = response.json(); // parses JSON response into native JavaScript objects\n\n    let newnotes = JSON.parse(JSON.stringify(notes));\n    //for loop search for note with that id\n    for (let index = 0; index < newnotes.length; index++) {\n      const element = newnotes[index];\n      if (element._id === id) {\n        newnotes[index].title = title;\n        newnotes[index].description = description;\n        newnotes[index].tag = tag;\n        break;\n      }\n    }\n    setnotes(newnotes);\n  };\n  const getUserdetails = async () => {\n    const response = await fetch(`${host}/api/auth/getuser`, {\n      method: 'POST',\n      // *GET, POST, PUT, DELETE, etc\n      headers: {\n        \"auth-token\": localStorage.getItem(\"token\")\n      }\n    });\n    const json = await response.json();\n    setuser(json);\n  };\n  return /*#__PURE__*/_jsxDEV(notecontext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes,\n      user,\n      getUserdetails\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"OiqxEeDqyNtJUMjSMiJUSdjCVw4=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["notecontext","useState","NoteState","props","host","notesinitial","notes","setnotes","userinitial","user","setuser","getNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","n","_id","editNote","newnotes","parse","index","length","element","getUserdetails","children"],"sources":["/Users/shehalshah/Desktop/react/dulynoted/src/context/notes/NoteState.js"],"sourcesContent":["import notecontext from \"./notecontext\";\nimport { useState } from \"react\";\nconst NoteState = (props) => {\n\n  const host=\"http://localhost:4000\"\n\n    const notesinitial =[]\n    const [notes, setnotes] = useState(notesinitial);\n\n    const userinitial =[]\n    const [user, setuser] = useState(userinitial);\n\n    \n\n    //get all  notes\n    const getNotes = async ()=>{\n\n      const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n        \n        method: 'GET', // *GET, POST, PUT, DELETE, etc\n        headers: {\n          'Content-Type': 'application/json',\n          \"auth-token\":localStorage.getItem(\"token\")\n        },\n      });\n      const json=await response.json();\n      setnotes(json)\n    }\n\n    //add notes\n    const addNote = async (title,description,tag)=>{\n\n      const response = await fetch(`${host}/api/notes/addnote`, {\n        \n        method: 'POST', // *GET, POST, PUT, DELETE, etc\n        headers: {\n          'Content-Type': 'application/json',\n          \"auth-token\":localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({title,description,tag}) // body data type must match \"Content-Type\" header\n      });\n\n      const note=await response.json()\n      setnotes(notes.concat(note))\n    }\n    \n    //delete note\n    const deleteNote = async (id)=>{\n      const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n        \n        method: 'DELETE', // *GET, POST, PUT, DELETE, etc\n        headers: {\n          'Content-Type': 'application/json',\n          \"auth-token\":localStorage.getItem(\"token\")\n        },\n      });\n      // const json=await response.json();\n\n      //added to new notes only if notes id != given id\n      const newNotes=notes.filter((n)=>{return n._id!==id})\n      setnotes(newNotes)\n\n    }\n\n    //edit note \n    const editNote = async(id,title,description,tag)=>{\n\n\n      const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n        \n        method: 'PUT', // *GET, POST, PUT, DELETE, etc\n        headers: {\n          'Content-Type': 'application/json',\n          \"auth-token\":localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({title,description,tag}) // body data type must match \"Content-Type\" header\n      });\n      const json= response.json(); // parses JSON response into native JavaScript objects\n\n      let newnotes=JSON.parse(JSON.stringify(notes))\n      //for loop search for note with that id\n      for (let index = 0; index < newnotes.length; index++) {\n        const element = newnotes[index];\n        if(element._id===id){\n          newnotes[index].title=title;\n          newnotes[index].description=description;\n          newnotes[index].tag=tag\n          break;\n        }\n      }\n      setnotes(newnotes)\n    }\n\n    const getUserdetails = async ()=>{\n\n      const response = await fetch(`${host}/api/auth/getuser`, {\n        \n        method: 'POST', // *GET, POST, PUT, DELETE, etc\n        headers: {\n          \"auth-token\":localStorage.getItem(\"token\")\n        },\n      });\n      const json=await response.json();\n      setuser(json);\n    }\n\n    return (\n        <notecontext.Provider value={{notes,addNote,deleteNote,editNote,getNotes,user,getUserdetails}}>\n            {props.children}\n        </notecontext.Provider>\n    )\n}\n\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}